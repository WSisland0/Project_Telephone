/*************************
******* git基础指令 ********
**************************/
//教程来自https://liaoxuefeng.com/books/git/introduction/index.html廖雪峰

/************ 初始配置git ************/
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"


/************ 创建本地仓库 **************/
//创建本地仓库----（.git）文件在此仓库生成
$ mkdir learngit           //mkdir功能：创建目录
$ cd learngit              //cd功能：跳转目录。  
$ pwd                      //pwd功能：输出当前工作目录，如下
/Users/michael/learngit
/*****详细功能*********/
/**********************
*[cd ..]:返回上一级
*[cd /c/Users/1/learngit]:转到learngit目录
*[cd test]:当在learngit目录下，像转入该目录下的test目录，输入cd test即可
************************/


/*************** 初始化仓库 ******************/
$ git init                 //输入指令
Initialized empty Git repository in /Users/michael/learngit/.git/


/*************** 创建txt等文本文件 **********/
//创建txt等文本文件--windows和git创建皆可
git版创建
$vi readme.txt             //vi为编辑/创建指令+文件全称
$i                         //输入i进入编辑状态，以下为编辑内容
  Git is a version control system.
  Git is free software.
$q!/wq!                    //编辑结束后esc退出编辑态。输入q!:退出不保存。输入wq!:退出保存


/**************** git add指令 ***************/
//git add指令：将文件添加到暂留区
$ git add readme.txt       //输入后无反馈为正常状态。格式：git add 文件全称


/**************** git commit指令 *************/
//git commit指令：将文件提交至仓库
$ git commit -m "wrote a readme file"   //格式：git commit -m "备注"
[master (root-commit) eaadf4e] wrote a readme file
 1 file changed, 2 insertions(+)        //结果显示，1个文件有改动，插入了两行内容
 create mode 100644 readme.txt
/*git add可以同时加入很多个文件，最后由commit统一提交。*/


/******************* git status指令 ************/
//git status指令：查看该目录的文件状态
$ git status                         //一共有几种情况。1.文件区很干净、2.文件未add、3.文件未commit。照提示解决即可
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   readme.txt

no changes added to commit (use "git add" and/or "git commit -a")

 
/*********** git diff 指令：可以查看当前仓库修改的内容 **********/
$ git diff readme.txt 
diff --git a/readme.txt b/readme.txt
index 46d49bf..9247db6 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1,2 +1,2 @@
-Git is a version control system.
+Git is a distributed version control system.
 Git is free software.


 /*************** git log指令：可以查看从最近到最远的提交日志 ************/
 $ git log --pretty=oneline           // --pretty=oneline选加
1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -> master) append GPL
e475afc93c209a690c39c13a46716e8fa000c366 add distributed
eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file
/*可以观察到有3个文件版本，分别是这几次修改的。一串数字是版本号，查找或修改以版本号的前几位即可*/


/********** git reset 指令 *****************/
//git reset 指令：退回版本，两种操作方法：1.HEAD^、2.reset+版本号
$ git reset --hard HEAD^              //HEAD^表示退回上一个版本，HEAD^^表示退回上上一个版本，HEAD~100表示退回上100个版本
$ git reset --soft HEAD^              //hard表示退回版本已提交状态，soft表示退回上版本未提交状态
$ git reset --soft HEAD^              //mixed表示退回上版本已添加但未提交状态

$ git reset --hard 1094a              //版本号一般为前几位即可
HEAD is now at 83b0afe append GPL


/*********** cat 指令：查看文件内容 ***********/
$ cat readme.txt                      //cat 文件全称：查看该文件的内容
Git is a distributed version control system.
Git is free software.


/************ git reflog指令：查看版本号 ****************/
$ git reflog
e475afc HEAD@{1}: reset: moving to HEAD^
1094adb (HEAD -> master) HEAD@{2}: commit: append GPL
e475afc HEAD@{3}: commit: add distributed
eaadf4e HEAD@{4}: commit (initial): wrote a readme file


//版本库：add加入至暂存区、commit将文件加入至分支。


/******************* git checkout -- 文件全称：撤销工作区修改 **************/
$ git checkout -- readme.txt
/*****两种情况**********
*命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。即版本库里的文件
***************************/


/********** rm ：删除文件 **********/
$ rm test.txt
$ git status
On branch master
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	deleted:    test.txt

no changes added to commit (use "git add" and/or "git commit -a")
//删除后有两种选择，删除文件或退回至版本库的文件
1.//git rm：删除文件
$ git rm test.txt
rm 'test.txt'
//然后再commit，使工作区clean
$ git commit -m "remove test.txt"
[master d46f35e] remove test.txt
 1 file changed, 1 deletion(-)
 delete mode 100644 test.txt
2.//退回至版本库文件
$ git checkout -- test.txt


/**************************
******** 远程仓库 ***********
***************************/

/******** SSH Key **********/
//在git bash 中生成在.ssh目录中的id_rsa和id_rsa.pub文件，将公匙在gitee或github中保存
$ ssh-keygen -t rsa -C "youremail@example.com"


/******** git关联本地仓库 ********/
/*在git中生成仓库，名字以leangit为例。将该仓库与本地仓库关联，在git中运行指令*/
$ git remote add origin git@github.com:michaelliao/learngit.git
//本人仓库：
$ git remote add origin git@github.com:WSisland0/learngit.git

/* origin为远程库的名字，当有多个工程时，origin会重复，可以改其他名字
** WSisland0为github的名字，不得有误*/
$ git remote               //可以查看远程库的名字


/********** git推送代码 ***********/
/* origin名字要与上面保持一致，若推送不成功，master和main都可试试。
** -u参数第一次要加，后面可以简化。这个参数的功能是将本地分支master和远程分支master关联起来*/
$ git push -u origin master          //第一次推送代码
$ git push origin master             //当文件状态改变时，第二次推送至远程库

Counting objects: 20, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (15/15), done.
Writing objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, done.
Total 20 (delta 5), reused 0 (delta 0)
remote: Resolving deltas: 100% (5/5), done.
To github.com:michaelliao/learngit.git
 * [new branch]      master -> master
Branch 'master' set up to track remote branch 'master' from 'origin'.


/************ git 删除远程库 **********/
/* 如果添加的时候地址填写错了，活着就是想删除远程库，可以先查看信息：*/
$ git remote -v

origin  git@github.com:michaelliao/learn-git.git (fetch)
origin  git@github.com:michaelliao/learn-git.git (push)

//然后根据名字删除
$ git remote rm origin          //origin为远程库名字


/********** git克隆代码 ***********/
$ git clone git@github.com:WSisland0/gitskills.git         //gitskills为github的仓库名字
//这是ssh协议，还有在github上会提供案例，那是https协议，速度比ssh要慢
Cloning into 'gitskills'...
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 3
Receiving objects: 100% (3/3), done.

/*若有本地 git 项目文件，想添加至自己的仓库。
**首先将该文件如test以windows的方式添加至本地仓库
**接着在git bash 上的目录调整至test，将该文件与原程库关联*/
$ git remote add origin1 git@github.com:WSisland0/test.git
/*注意远程库的名字不能重复，且要先在github建立好目标仓库，最好在远程库上标注origin1的名字，为后续做准备

**若想下载别人的项目可以先克隆别人的项目至本地**/
$git clone git@gitee.com:tdtxyzhh/c-language-microproject.git
$cd c-language-microproject
/*将本地代码库与远程库关联，然后推送至新的远程库
**注意：克隆别人得项目后不需要git init，此指令仅针对未初始化的新建仓库，
**而克隆仓库已经包含原有.git信息，如若初始化很可能会破坏原来的信息。*/
$ git remote add origin5 git@github.com:WSisland0/microproject.git
$ git push -u origin5 master
//创建新的分支，开始更改现有代码，合并并推送新的代码


/****************************
********** 分支管理 **********
*****************************/

/********** 创建与合并分支 ********/
$ git checkout -b dev                  //创建并切换到dev分支、-b参数表示创建并切换，相当于以下两条指令
$ git switch -c dev                    //也可以用这条指令

Switched to a new branch 'dev'

$ git branch dev                       //创建dev分支
$ git checkout dev                     //切换到dev分支
Switched to branch 'dev'


/********** 查看当前分支 ********/
$ git branch                           //git branch命令会列出所有分支，当前分支前面会标一个*号。
* dev
  master
//更改完后正常 add 与 commit 指令


/********** 切换并合并分支 ********/
$ git checkout master                   //切换为master分支
$ git merge dev                        //将dev分支的工作成果合并到master分支


/********** checkout & switch 切换命令 *************/
//我们注意到切换分支用$ git checkout master、但撤销修改也是git checkout -- <file>
//一条命令，两个作用，所以还可以用switch切换分支
 $ git switch master


/********** 删除分支 *************/
$ git branch -d dev 

Deleted branch dev (was b17d20e).


/*********** 解决冲突 ************/
//在新的分支feature1中更改，改完后 add 和 commit ，切换为master分支（并未合并）
//此时git bash 会提醒当前的master分支比远程的master分支要超前一个提交
//在master分支上更改一些内容，合并分支feature1
//此时会提示有些冲突，git status观察到果然有冲突，只能手动更改合并后的master分支的内容
$ cat readme.txt

Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files.
<<<<<<< HEAD
Creating a new branch is quick & simple.
=======
Creating a new branch is quick AND simple.
>>>>>>> feature1
//Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改后保存、add、commit
//还可以用git log观察分支的合并情况
$ git log 
$ git log --graph
//最后删除feature1的分支
$ git branch -d feature1


/************** 分支管理策略 ****************/
//通常合并分支时，git 会用Fast forward 模式，但在这种模式下，删除分支会删除分支的commit信息
//如果强制禁用Fast forward 模式，git会在merge时生成一个新的commit，这样分支历史上就可以看到分支信息
$ git merge --no-ff -m "merge with no-ff" dev
Merge made by the 'recursive' strategy.
 readme.txt | 1 +
 1 file changed, 1 insertion(+)
//合并分支时，--no-ff是禁用Fast forward 模式
//-m""是将commit信息写进去

//在实际开发中，我们应该按照几个基本原则进行分支管理：
//首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
//那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
//你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。


/*******************************************
****************** 多人协作 *****************
*******************************************/

/***************** 查看远程库的信息 *************/
$ git remote
origin
origin1
origin2
//可以查看到有几个远程库，
//注意：有多个远程库表明一开始输入错了，但它不支持修改，只能这样显示，找出正确的远程库名称
/***************** 查看远程库更详细的信息 ****************/
$ git remote -v
origin  git@github.com:michaelliao/learngit.git (fetch)
origin  git@github.com:michaelliao/learngit.git (push)
//上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。


/****************** 推送分支 ***************/
$ git push origin master          //推送主分支，master需要时刻与远程同步
$ git push origin dev             //推送其他分支，dev是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
//bug分支只用于在本地修复bug，就没必要推到远程了
//修复完bug与dev分支合并，删除bug分支


/******************************************
******************* 多人协作 ***************
******************* 抓取分支 ***************
*******************************************/


//团队协同合作时，每人皆在远程库clone了一个主分支
//每人皆在dev分支下开发，必须创建远程库的dev分支到本地，
$ git checkout -b dev origin/dev
//在dev上修改，并时不时将dev分支push到远程库
$ git add env.txt

$ git commit -m "add env"
[dev 7a5e5dd] add env
 1 file changed, 1 insertion(+)
 create mode 100644 env.txt

$ git push origin dev
Counting objects: 3, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 308 bytes | 308.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To github.com:michaelliao/learngit.git
   f52c633..7a5e5dd  dev -> dev

//当其他人推送完后，我想推送dev分支却发现推送失败
$ cat env.txt
env

$ git add env.txt

$ git commit -m "add new env"
[dev 7bd91f1] add new env
 1 file changed, 1 insertion(+)
 create mode 100644 env.txt

$ git push origin dev
To github.com:michaelliao/learngit.git
 ! [rejected]        dev -> dev (non-fast-forward)
error: failed to push some refs to 'git@github.com:michaelliao/learngit.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

//推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，
//解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，
//然后，在本地合并，解决冲突，再推送：
$ git pull
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details.

    git pull <remote> <branch>

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/<branch> dev
//git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，
//根据提示，设置dev和origin/dev的链接：                          //git checkout -b branch-name origin/branch-name
$ git branch --set-upstream-to=origin/dev dev
Branch 'dev' set up to track remote branch 'dev' from 'origin'.
//再pull
$ git pull
Auto-merging env.txt
CONFLICT (add/add): Merge conflict in env.txt
Automatic merge failed; fix conflicts and then commit the result.
//这回git pull成功，但是合并有冲突，需要手动解决，
//解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：
$ git commit -m "fix env conflict"
[dev 57c53ab] fix env conflict

$ git push origin dev
Counting objects: 6, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (6/6), 621 bytes | 621.00 KiB/s, done.
Total 6 (delta 0), reused 0 (delta 0)
To github.com:michaelliao/learngit.git
   7a5e5dd..57c53ab  dev -> dev


/*因此，多人协作的工作模式通常是这样：

首先，可以尝试用git push origin <branch-name>推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。*/